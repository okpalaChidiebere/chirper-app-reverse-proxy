# TODO: add servers to individual port as well and generate an ssl certificate for them too
# TODO: maybe just ue http2 for all connections :)

worker_processes 1;

events { worker_connections 1024; }
error_log /dev/stdout debug;

stream {
    upstream http {
        server localhost:8000;
    }

    upstream https {
        server localhost:8001;
    }

    map $ssl_preread_protocol $upstream {
        default https;
        "" http;
    }

    # HTTP/1.1 non-SSL and SSL on the same port
    server {
        listen 8080; # for all IPv4 connections
        listen [::]:8080; # for IPv6 connections
        proxy_pass $upstream;
        ssl_preread on;
    }
}

http {
    sendfile on;
    keepalive_timeout 65;

    log_format main '$remote_addr [$time_local] [$time_local] [$cookie_X-AUTH-TOKEN] '
    '"$scheme $host $request" $status $sent_http_content_type $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for" '
    '($request_time)'
    '(($sent_http_set_cookie))';

    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Host $server_name;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $http_host;
    proxy_set_header   X-NginX-Proxy true;


    # Upstream servers here
    upstream chirper-app-api-user {
        server chirper-app-user-service:8000; # backened-user will be the service name in docker-compose file
    }

    upstream chirper-app-api-image-filter {
        server chirper-app-image-filter-service:9000;
    }
    
    # HTTP/1.1 proxied here
    server {
        #insecured port
        listen 8000;
        listen [::]:8000;

        # secured port. You probaly will want to use this one often
        listen 8001 ssl;
        listen [::]:8001 ssl;

        server_name  a.example.com;

        ssl_certificate   /etc/nginx/certs/server_cert.pem;
        ssl_certificate_key /etc/nginx/certs/server_key.pem;

        # we dont need to verify client. The browser is smart for this. see https://serverfault.com/questions/909993/how-to-send-ssl-certificate-when-nginx-ssl-verify-client-is-optional
        # ssl_client_certificate /etc/nginx/certs/localhost_ca_cert.pem;
        # ssl_verify_client optional;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;

        ssl_prefer_server_ciphers on;
        ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;

        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 5m;

        error_page 404 = @400;         # Treat invalid paths as bad requests
        proxy_intercept_errors on;     # Do not send backend errors to client
        include api_json_errors.conf;  # API client-friendly JSON errors
        default_type application/json;  # If no content-type in any response, assume JSON; like error pages returing json

        # only allow clients with valid client ssl certificate
        # if ($ssl_client_verify != SUCCESS) {
        #     return 403;
        # }


        location ~* "^/(api/v0/tweets)" {
        # You NEED to include a space between the if statement and the opening parenthesis. :)
            if ($request_method = 'OPTIONS' ) {
                add_header Access-Control-Allow-Origin "$http_origin" always; # 'always' keyword ensure that this header is set for every http responses as well
                add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PATCH';
                add_header 'Content-Length' 0;
                return 204 no-content;
            }

            proxy_pass http://chirper-app-tweet-service:6060;
            # returns 404 by default when it gets here
        }
    }

    # gRPC or HTTP/2 service proxied here
    server {
        #must use SSL for http2 to work in web browsers in Nginx. Otherwise you get 'net::ERR_SSL_PROTOCOL_ERROR'
        listen 1443 ssl http2 ipv6only=on;
        listen [::]:1443 ssl http2;

        server_name  b.example.com;

        # TLS config
        ssl_certificate     /etc/nginx/certs/server_cert.pem;
        ssl_certificate_key /etc/nginx/certs/server_key.pem;
        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;

        ssl_session_cache    shared:SSL:10m;
        ssl_session_timeout  5m;

        ssl_ciphers                EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
        ssl_prefer_server_ciphers  on;

        # After securing the outward facing connection, pass it through
        # as an insecure connection so streamserver doesn't barf.

        # Error responses
        error_page 404 = @400;       
        proxy_intercept_errors on;    
        include api_json_errors.conf;  
        default_type application/json; 

        location ~* "^/(tweet.v1..*)" {
            if ($content_type = "application/grpc"){
                grpc_pass grpc://chirper-app-tweet-service:6061;
            }
        }

        location ~* "^/(user.v1..*)" {
            # types { } default_type "application/json";  # if no Content-Type assume JSON
            if ($request_method = 'OPTIONS' ) {
                add_header Access-Control-Allow-Origin "$http_origin";
                add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept';
                add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS';
                add_header 'Content-Length' 0;
                return 204 no-content;
            }

            if ($content_type = "application/grpc"){
                grpc_pass grpc://chirper-app-api-user;
            }
            
            if ($content_type = "application/json"){
                proxy_pass http://chirper-app-api-user; # 'chirper-app-api-user' will be the name of the service that will expose the user cluster pod in the k8s for consumption
            }
        }
        location ~* "^/(image_filter.v1.*)" {
            if ($request_method = 'OPTIONS' ) {
                add_header Access-Control-Allow-Origin "$http_origin";
                add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept';
                add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS';
                add_header 'Content-Length' 0;
                return 204 no-content;
            }

            if ($content_type = "application/grpc"){
                grpc_pass grpc://chirper-app-api-image-filter;
            }
            if ($content_type = "application/json"){
                proxy_pass http://chirper-app-api-image-filter;
            }
        }
    }
}



#                 proxy_temp_file_write_size 64k;
#         proxy_connect_timeout 10080s;
#         proxy_send_timeout 10080;
#         proxy_read_timeout 10080;
#         proxy_buffer_size 64k;
#         proxy_buffers 16 32k;
#         proxy_busy_buffers_size 64k;
#         proxy_redirect off;
#         proxy_request_buffering off;
#         proxy_buffering off;
#                 proxy_pass http://keepalive-upstream;
#             }

#         }
#     }
# }



#   # allow longer uri
#   client_header_buffer_size 256k;
#   large_client_header_buffers 8 1024k;

#   # Add headers to serve security related headers
# #   add_header Strict-Transport-Security "max-age=15768000; preload;";
# #   add_header X-Content-Type-Options nosniff;
# #   add_header X-Frame-Options "SAMEORIGIN";
# #   add_header X-XSS-Protection "1; mode=block";
# #   add_header X-Robots-Tag none;



#   client_max_body_size 1G;
#   client_body_timeout 600s;

    # tcp_nopush on;
    #     tcp_nodelay on;
    #     keepalive_timeout 10004;
    #     types_hash_max_size 2048;
    #     client_max_body_size 10m;


    # proxy_connect_timeout 1000; #10080
    #     proxy_send_timeout 1000;
    #     proxy_read_timeout 1000;
    #     send_timeout 1000;